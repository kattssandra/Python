{"name": "test_insert_employee", "status": "broken", "statusDetails": {"message": "sqlalchemy.exc.IntegrityError: (psycopg2.errors.ForeignKeyViolation) insert or update on table \"employee\" violates foreign key constraint \"FK_3f25598a5f106392263f58a2eb2\"\nDETAIL:  Key (company_id)=(5318) is not present in table \"company\".\n\n[SQL: insert into employee (first_name, last_name, middle_name, phone, email, birthdate, avatar_url, company_id) values (%(new_first_name)s, %(new_last_name)s, %(new_middle_name)s, %(new_phone)s, %(new_email)s, %(new_birthdate)s, %(new_avatar_url)s, %(company_id)s)]\n[parameters: {'new_first_name': 'Veter', 'new_last_name': 'Vetrov', 'new_middle_name': 'Acropovich', 'new_phone': '89035145997', 'new_email': 'motoparts@mail.ru', 'new_birthdate': '2000-11-10', 'new_avatar_url': 'string', 'company_id': 5318}]\n(Background on this error at: https://sqlalche.me/e/14/gkpj)", "trace": "self = <sqlalchemy.engine.base.Connection object at 0x000001DD749ADE50>\ndialect = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x000001DD749AD460>\nconstructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2'>>\nstatement = 'insert into employee (first_name, last_name, middle_name, phone, email, birthdate, avatar_url, company_id) values (%(...last_name)s, %(new_middle_name)s, %(new_phone)s, %(new_email)s, %(new_birthdate)s, %(new_avatar_url)s, %(company_id)s)'\nparameters = {'company_id': 5318, 'new_avatar_url': 'string', 'new_birthdate': '2000-11-10', 'new_email': 'motoparts@mail.ru', ...}\nexecution_options = immutabledict({'autocommit': symbol('PARSE_AUTOCOMMIT')})\nargs = (<sqlalchemy.dialects.postgresql.psycopg2.PGCompiler_psycopg2 object at 0x000001DD749ADB20>, [{'company_id': 5318, 'ne... BindParameter('new_first_name', None, type_=NullType()), BindParameter('new_last_name', None, type_=NullType()), ...])\nkw = {'cache_hit': symbol('CACHE_MISS')}, branched = <sqlalchemy.engine.base.Connection object at 0x000001DD749ADE50>, yp = None\nconn = <sqlalchemy.pool.base._ConnectionFairy object at 0x000001DD749AD7F0>\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x000001DD749ADB80>\ncursor = <cursor object at 0x000001DD74984740; closed: -1>, evt_handled = False\n\n    def _execute_context(\n        self,\n        dialect,\n        constructor,\n        statement,\n        parameters,\n        execution_options,\n        *args,\n        **kw\n    ):\n        \"\"\"Create an :class:`.ExecutionContext` and execute, returning\n        a :class:`_engine.CursorResult`.\"\"\"\n    \n        branched = self\n        if self.__branch_from:\n            # if this is a \"branched\" connection, do everything in terms\n            # of the \"root\" connection, *except* for .close(), which is\n            # the only feature that branching provides\n            self = self.__branch_from\n    \n        if execution_options:\n            yp = execution_options.get(\"yield_per\", None)\n            if yp:\n                execution_options = execution_options.union(\n                    {\"stream_results\": True, \"max_row_buffer\": yp}\n                )\n    \n        try:\n            conn = self._dbapi_connection\n            if conn is None:\n                conn = self._revalidate_connection()\n    \n            context = constructor(\n                dialect, self, conn, execution_options, *args, **kw\n            )\n        except (exc.PendingRollbackError, exc.ResourceClosedError):\n            raise\n        except BaseException as e:\n            self._handle_dbapi_exception(\n                e, util.text_type(statement), parameters, None, None\n            )\n    \n        if (\n            self._transaction\n            and not self._transaction.is_active\n            or (\n                self._nested_transaction\n                and not self._nested_transaction.is_active\n            )\n        ):\n            self._invalid_transaction()\n    \n        elif self._trans_context_manager:\n            TransactionalContext._trans_ctx_check(self)\n    \n        if self._is_future and self._transaction is None:\n            self._autobegin()\n    \n        context.pre_exec()\n    \n        if dialect.use_setinputsizes:\n            context._set_input_sizes()\n    \n        cursor, statement, parameters = (\n            context.cursor,\n            context.statement,\n            context.parameters,\n        )\n    \n        if not context.executemany:\n            parameters = parameters[0]\n    \n        if self._has_events or self.engine._has_events:\n            for fn in self.dispatch.before_cursor_execute:\n                statement, parameters = fn(\n                    self,\n                    cursor,\n                    statement,\n                    parameters,\n                    context,\n                    context.executemany,\n                )\n    \n        if self._echo:\n    \n            self._log_info(statement)\n    \n            stats = context._get_cache_stats()\n    \n            if not self.engine.hide_parameters:\n                self._log_info(\n                    \"[%s] %r\",\n                    stats,\n                    sql_util._repr_params(\n                        parameters, batches=10, ismulti=context.executemany\n                    ),\n                )\n            else:\n                self._log_info(\n                    \"[%s] [SQL parameters hidden due to hide_parameters=True]\"\n                    % (stats,)\n                )\n    \n        evt_handled = False\n        try:\n            if context.executemany:\n                if self.dialect._has_events:\n                    for fn in self.dialect.dispatch.do_executemany:\n                        if fn(cursor, statement, parameters, context):\n                            evt_handled = True\n                            break\n                if not evt_handled:\n                    self.dialect.do_executemany(\n                        cursor, statement, parameters, context\n                    )\n            elif not parameters and context.no_parameters:\n                if self.dialect._has_events:\n                    for fn in self.dialect.dispatch.do_execute_no_params:\n                        if fn(cursor, statement, context):\n                            evt_handled = True\n                            break\n                if not evt_handled:\n                    self.dialect.do_execute_no_params(\n                        cursor, statement, context\n                    )\n            else:\n                if self.dialect._has_events:\n                    for fn in self.dialect.dispatch.do_execute:\n                        if fn(cursor, statement, parameters, context):\n                            evt_handled = True\n                            break\n                if not evt_handled:\n>                   self.dialect.do_execute(\n                        cursor, statement, parameters, context\n                    )\n\nC:\\Users\\User\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1910: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x000001DD749AD460>\ncursor = <cursor object at 0x000001DD74984740; closed: -1>\nstatement = 'insert into employee (first_name, last_name, middle_name, phone, email, birthdate, avatar_url, company_id) values (%(...last_name)s, %(new_middle_name)s, %(new_phone)s, %(new_email)s, %(new_birthdate)s, %(new_avatar_url)s, %(company_id)s)'\nparameters = {'company_id': 5318, 'new_avatar_url': 'string', 'new_birthdate': '2000-11-10', 'new_email': 'motoparts@mail.ru', ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x000001DD749ADB80>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       psycopg2.errors.ForeignKeyViolation: insert or update on table \"employee\" violates foreign key constraint \"FK_3f25598a5f106392263f58a2eb2\"\nE       DETAIL:  Key (company_id)=(5318) is not present in table \"company\".\n\nC:\\Users\\User\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:736: ForeignKeyViolation\n\nThe above exception was the direct cause of the following exception:\n\n    def test_insert_employee():\n        db = create_engine(db_connection_string)\n        sql = text(\"insert into employee (first_name, last_name, middle_name, phone, email, birthdate, avatar_url, company_id) values (:new_first_name, :new_last_name, :new_middle_name, :new_phone, :new_email, :new_birthdate, :new_avatar_url, :company_id)\")\n>       rows = db.execute(sql, new_first_name = 'Veter', new_last_name = 'Vetrov', new_middle_name = 'Acropovich', new_phone = '89035145997', new_email = 'motoparts@mail.ru', new_birthdate = '2000-11-10', new_avatar_url = 'string', company_id = 5318)\n\nlesson9\\test_database.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n<string>:2: in execute\n    ???\nC:\\Users\\User\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sqlalchemy\\util\\deprecations.py:468: in warned\n    return fn(*args, **kwargs)\nC:\\Users\\User\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:3267: in execute\n    return connection.execute(statement, *multiparams, **params)\nC:\\Users\\User\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1385: in execute\n    return meth(self, multiparams, params, _EMPTY_EXECUTION_OPTS)\nC:\\Users\\User\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sqlalchemy\\sql\\elements.py:334: in _execute_on_connection\n    return connection._execute_clauseelement(\nC:\\Users\\User\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1577: in _execute_clauseelement\n    ret = self._execute_context(\nC:\\Users\\User\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1953: in _execute_context\n    self._handle_dbapi_exception(\nC:\\Users\\User\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:2134: in _handle_dbapi_exception\n    util.raise_(\nC:\\Users\\User\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sqlalchemy\\util\\compat.py:211: in raise_\n    raise exception\nC:\\Users\\User\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1910: in _execute_context\n    self.dialect.do_execute(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <sqlalchemy.dialects.postgresql.psycopg2.PGDialect_psycopg2 object at 0x000001DD749AD460>\ncursor = <cursor object at 0x000001DD74984740; closed: -1>\nstatement = 'insert into employee (first_name, last_name, middle_name, phone, email, birthdate, avatar_url, company_id) values (%(...last_name)s, %(new_middle_name)s, %(new_phone)s, %(new_email)s, %(new_birthdate)s, %(new_avatar_url)s, %(company_id)s)'\nparameters = {'company_id': 5318, 'new_avatar_url': 'string', 'new_birthdate': '2000-11-10', 'new_email': 'motoparts@mail.ru', ...}\ncontext = <sqlalchemy.dialects.postgresql.psycopg2.PGExecutionContext_psycopg2 object at 0x000001DD749ADB80>\n\n    def do_execute(self, cursor, statement, parameters, context=None):\n>       cursor.execute(statement, parameters)\nE       sqlalchemy.exc.IntegrityError: (psycopg2.errors.ForeignKeyViolation) insert or update on table \"employee\" violates foreign key constraint \"FK_3f25598a5f106392263f58a2eb2\"\nE       DETAIL:  Key (company_id)=(5318) is not present in table \"company\".\nE       \nE       [SQL: insert into employee (first_name, last_name, middle_name, phone, email, birthdate, avatar_url, company_id) values (%(new_first_name)s, %(new_last_name)s, %(new_middle_name)s, %(new_phone)s, %(new_email)s, %(new_birthdate)s, %(new_avatar_url)s, %(company_id)s)]\nE       [parameters: {'new_first_name': 'Veter', 'new_last_name': 'Vetrov', 'new_middle_name': 'Acropovich', 'new_phone': '89035145997', 'new_email': 'motoparts@mail.ru', 'new_birthdate': '2000-11-10', 'new_avatar_url': 'string', 'company_id': 5318}]\nE       (Background on this error at: https://sqlalche.me/e/14/gkpj)\n\nC:\\Users\\User\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:736: IntegrityError"}, "start": 1718047975105, "stop": 1718047978523, "uuid": "2fb0f93d-749a-46d5-8634-f79e90124099", "historyId": "840cbca7b90260853db3a22162d72c1a", "testCaseId": "840cbca7b90260853db3a22162d72c1a", "fullName": "lesson9.test_database#test_insert_employee", "labels": [{"name": "parentSuite", "value": "lesson9"}, {"name": "suite", "value": "test_database"}, {"name": "host", "value": "HOME-PC"}, {"name": "thread", "value": "12120-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "lesson9.test_database"}]}